
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 26 19:31:20 EST 2018
//----------------------------------------------------

package mjparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileNotFoundException;
import ast.node.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 26 19:31:20 EST 2018
  */
public class mj extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public mj() {super();}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public mj(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\006\000\002\002" +
    "\004\000\002\010\021\000\002\010\004\000\002\005\004" +
    "\000\002\005\002\000\002\006\005\000\002\006\013\000" +
    "\002\006\007\000\002\006\007\000\002\006\011\000\002" +
    "\006\007\000\002\006\003\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\010\000\002\003\006\000" +
    "\002\003\006\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\006\017\005\070\006\001\002\000\004\002" +
    "\136\001\002\000\004\046\010\001\002\000\006\017\005" +
    "\070\006\001\002\000\004\002\uffff\001\002\000\004\044" +
    "\011\001\002\000\004\037\012\001\002\000\004\061\015" +
    "\001\002\000\006\002\000\070\014\001\002\000\006\002" +
    "\ufffd\070\ufffd\001\002\000\004\011\016\001\002\000\004" +
    "\032\017\001\002\000\004\034\020\001\002\000\004\036" +
    "\021\001\002\000\004\016\022\001\002\000\004\007\023" +
    "\001\002\000\004\035\024\001\002\000\004\041\025\001" +
    "\002\000\004\042\026\001\002\000\004\061\027\001\002" +
    "\000\004\010\030\001\002\000\020\011\ufffb\012\ufffb\020" +
    "\ufffb\026\ufffb\052\ufffb\055\ufffb\070\ufffb\001\002\000\020" +
    "\011\032\012\034\020\041\026\037\052\040\055\036\070" +
    "\033\001\002\000\020\011\ufffb\012\ufffb\020\ufffb\026\ufffb" +
    "\052\ufffb\055\ufffb\070\ufffb\001\002\000\022\011\ufff4\012" +
    "\ufff4\020\ufff4\021\ufff4\026\ufff4\052\ufff4\055\ufff4\070\ufff4" +
    "\001\002\000\006\002\ufffe\070\ufffe\001\002\000\020\011" +
    "\ufffc\012\ufffc\020\ufffc\026\ufffc\052\ufffc\055\ufffc\070\ufffc" +
    "\001\002\000\004\007\130\001\002\000\004\007\124\001" +
    "\002\000\004\007\114\001\002\000\004\007\042\001\002" +
    "\000\030\005\043\007\054\025\053\056\051\057\044\060" +
    "\047\062\046\063\050\064\052\065\056\070\055\001\002" +
    "\000\030\005\043\007\054\025\053\056\051\057\044\060" +
    "\047\062\046\063\050\064\052\065\056\070\055\001\002" +
    "\000\004\007\110\001\002\000\016\004\064\005\066\006" +
    "\067\010\104\023\065\024\063\001\002\000\020\004\uffe7" +
    "\005\uffe7\006\uffe7\010\uffe7\023\uffe7\024\uffe7\027\uffe7\001" +
    "\002\000\020\004\uffea\005\uffea\006\uffea\010\uffea\023\uffea" +
    "\024\uffea\027\uffea\001\002\000\020\004\uffe6\005\uffe6\006" +
    "\uffe6\010\uffe6\023\uffe6\024\uffe6\027\uffe6\001\002\000\004" +
    "\007\077\001\002\000\020\004\uffe9\005\uffe9\006\uffe9\010" +
    "\uffe9\023\uffe9\024\uffe9\027\uffe9\001\002\000\030\005\043" +
    "\007\054\025\053\056\051\057\044\060\047\062\046\063" +
    "\050\064\052\065\056\070\055\001\002\000\032\005\043" +
    "\007\054\015\060\025\053\056\051\057\044\060\047\062" +
    "\046\063\050\064\052\065\056\070\055\001\002\000\020" +
    "\004\uffe3\005\uffe3\006\uffe3\010\uffe3\023\uffe3\024\uffe3\027" +
    "\uffe3\001\002\000\020\004\uffe8\005\uffe8\006\uffe8\010\uffe8" +
    "\023\uffe8\024\uffe8\027\uffe8\001\002\000\016\004\064\005" +
    "\066\006\067\010\075\023\065\024\063\001\002\000\004" +
    "\010\061\001\002\000\030\005\043\007\054\025\053\056" +
    "\051\057\044\060\047\062\046\063\050\064\052\065\056" +
    "\070\055\001\002\000\020\004\064\005\066\006\067\010" +
    "\uffeb\023\065\024\063\027\uffeb\001\002\000\030\005\043" +
    "\007\054\025\053\056\051\057\044\060\047\062\046\063" +
    "\050\064\052\065\056\070\055\001\002\000\030\005\043" +
    "\007\054\025\053\056\051\057\044\060\047\062\046\063" +
    "\050\064\052\065\056\070\055\001\002\000\030\005\043" +
    "\007\054\025\053\056\051\057\044\060\047\062\046\063" +
    "\050\064\052\065\056\070\055\001\002\000\030\005\043" +
    "\007\054\025\053\056\051\057\044\060\047\062\046\063" +
    "\050\064\052\065\056\070\055\001\002\000\030\005\043" +
    "\007\054\025\053\056\051\057\044\060\047\062\046\063" +
    "\050\064\052\065\056\070\055\001\002\000\020\004\uffef" +
    "\005\uffef\006\uffef\010\uffef\023\uffef\024\uffef\027\uffef\001" +
    "\002\000\020\004\ufff0\005\ufff0\006\ufff0\010\ufff0\023\ufff0" +
    "\024\ufff0\027\ufff0\001\002\000\020\004\ufff2\005\ufff2\006" +
    "\ufff2\010\ufff2\023\ufff2\024\ufff2\027\ufff2\001\002\000\020" +
    "\004\ufff1\005\ufff1\006\ufff1\010\ufff1\023\ufff1\024\ufff1\027" +
    "\ufff1\001\002\000\020\004\ufff3\005\ufff3\006\ufff3\010\ufff3" +
    "\023\ufff3\024\ufff3\027\ufff3\001\002\000\020\004\uffe4\005" +
    "\uffe4\006\uffe4\010\uffe4\023\uffe4\024\uffe4\027\uffe4\001\002" +
    "\000\020\004\064\005\066\006\067\010\uffe5\023\065\024" +
    "\063\027\uffe5\001\002\000\030\005\043\007\054\025\053" +
    "\056\051\057\044\060\047\062\046\063\050\064\052\065" +
    "\056\070\055\001\002\000\016\004\064\005\066\006\067" +
    "\023\065\024\063\027\101\001\002\000\030\005\043\007" +
    "\054\025\053\056\051\057\044\060\047\062\046\063\050" +
    "\064\052\065\056\070\055\001\002\000\016\004\064\005" +
    "\066\006\067\010\103\023\065\024\063\001\002\000\020" +
    "\004\uffed\005\uffed\006\uffed\010\uffed\023\uffed\024\uffed\027" +
    "\uffed\001\002\000\016\011\032\020\041\026\037\052\040" +
    "\055\036\070\033\001\002\000\022\011\ufff7\012\ufff7\020" +
    "\ufff7\021\106\026\ufff7\052\ufff7\055\ufff7\070\ufff7\001\002" +
    "\000\016\011\032\020\041\026\037\052\040\055\036\070" +
    "\033\001\002\000\022\011\ufff6\012\ufff6\020\ufff6\021\ufff6" +
    "\026\ufff6\052\ufff6\055\ufff6\070\ufff6\001\002\000\030\005" +
    "\043\007\054\025\053\056\051\057\044\060\047\062\046" +
    "\063\050\064\052\065\056\070\055\001\002\000\016\004" +
    "\064\005\066\006\067\010\112\023\065\024\063\001\002" +
    "\000\020\004\uffec\005\uffec\006\uffec\010\uffec\023\uffec\024" +
    "\uffec\027\uffec\001\002\000\020\004\uffee\005\uffee\006\uffee" +
    "\010\uffee\023\uffee\024\uffee\027\uffee\001\002\000\030\005" +
    "\043\007\054\025\053\056\051\057\044\060\047\062\046" +
    "\063\050\064\052\065\056\070\055\001\002\000\016\004" +
    "\064\005\066\006\067\023\065\024\063\027\116\001\002" +
    "\000\030\005\043\007\054\025\053\056\051\057\044\060" +
    "\047\062\046\063\050\064\052\065\056\070\055\001\002" +
    "\000\016\004\064\005\066\006\067\023\065\024\063\027" +
    "\120\001\002\000\030\005\043\007\054\025\053\056\051" +
    "\057\044\060\047\062\046\063\050\064\052\065\056\070" +
    "\055\001\002\000\016\004\064\005\066\006\067\010\122" +
    "\023\065\024\063\001\002\000\004\044\123\001\002\000" +
    "\022\011\ufff9\012\ufff9\020\ufff9\021\ufff9\026\ufff9\052\ufff9" +
    "\055\ufff9\070\ufff9\001\002\000\030\005\043\007\054\025" +
    "\053\056\051\057\044\060\047\062\046\063\050\064\052" +
    "\065\056\070\055\001\002\000\016\004\064\005\066\006" +
    "\067\010\126\023\065\024\063\001\002\000\016\011\032" +
    "\020\041\026\037\052\040\055\036\070\033\001\002\000" +
    "\022\011\ufff5\012\ufff5\020\ufff5\021\ufff5\026\ufff5\052\ufff5" +
    "\055\ufff5\070\ufff5\001\002\000\030\005\043\007\054\025" +
    "\053\056\051\057\044\060\047\062\046\063\050\064\052" +
    "\065\056\070\055\001\002\000\016\004\064\005\066\006" +
    "\067\010\132\023\065\024\063\001\002\000\004\044\133" +
    "\001\002\000\022\011\ufff8\012\ufff8\020\ufff8\021\ufff8\026" +
    "\ufff8\052\ufff8\055\ufff8\070\ufff8\001\002\000\020\011\032" +
    "\012\135\020\041\026\037\052\040\055\036\070\033\001" +
    "\002\000\022\011\ufffa\012\ufffa\020\ufffa\021\ufffa\026\ufffa" +
    "\052\ufffa\055\ufffa\070\ufffa\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\030\001\001\000\004\006\034\001\001" +
    "\000\004\005\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\044\001" +
    "\001\000\004\003\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\075" +
    "\001\001\000\004\003\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\061\001\001\000\002\001\001\000\004\003\073\001" +
    "\001\000\004\003\072\001\001\000\004\003\071\001\001" +
    "\000\004\003\070\001\001\000\004\003\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\077\001\001\000\002\001\001\000\004" +
    "\003\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\104\001\001\000\002\001\001\000\004\006\106" +
    "\001\001\000\002\001\001\000\004\003\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\114\001\001\000\002\001\001\000\004\003\116\001" +
    "\001\000\002\001\001\000\004\003\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\124\001\001\000\002\001\001\000\004\006\126\001\001" +
    "\000\002\001\001\000\004\003\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\034" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$mj$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$mj$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$mj$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public PrintWriter out; 
    
    public String programName;

    public void unrecovered_syntax_error(Symbol cur_SymbolValue) {
        //System.out.println("cur_SymbolValue: "+ cur_SymbolValue.value);
		report_fatal_error("Fatal syntax error", cur_SymbolValue);
    }
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        done_parsing();
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
        throw new mjparser.ParseException("Fatal parsing error", 
                                          tok.line, tok.pos);
    }
    
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol)info;
        mjparser.SymbolValue tok = (mjparser.SymbolValue)sym.value;
		//System.out.println("sym null? "+(sym == null)+"; sym.sym: "+sym.sym);
		//System.err.println("tok null? "+ (tok == null)+"; tok.lexeme: "+ tok.lexeme);
        System.err.println("[" + tok.line + "," + tok.pos + "] "); 
                              System.err.println( message + " at " + tok.toString() );
    }
            

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$mj$actions {
  private final mj parser;

  /** Constructor */
  CUP$mj$actions(mj parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$mj$do_action(
    int                        CUP$mj$act_num,
    java_cup.runtime.lr_parser CUP$mj$parser,
    java.util.Stack            CUP$mj$stack,
    int                        CUP$mj$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$mj$result;

      /* select the action based on the action number */
      switch (CUP$mj$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= COMMENT 
            {
              IExp RESULT =null;

              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue lp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = e;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= NOT exp 
            {
              IExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue n = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new NotExp(n.line, n.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= FALSE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println("false");
		RESULT = new FalseLiteral(t.line, t.pos, t.lexeme, t.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= TRUE 
            {
              IExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println("true");
		RESULT = new TrueLiteral(t.line, t.pos, t.lexeme, t.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= BUTTON_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println(c.lexeme);
		RESULT = new ButtonLiteral(c.line, c.pos, c.lexeme, c.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= COLOR_LITERAL 
            {
              IExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println(c.lexeme);
		RESULT = new ColorLiteral(c.line, c.pos, c.lexeme, c.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= INT_LITERAL 
            {
              IExp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println(i.value);
		RESULT = new IntLiteral(i.line, i.pos, i.lexeme, i.value);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= LPAREN BYTE RPAREN exp 
            {
              IExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
		RESULT = new ByteCast(e.getLine(), e.getPos(), (IExp)e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= MEGGYCHECKBUTTON LPAREN exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new MeggyCheckButton(m.line, m.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= MEGGYGETPIXEL LPAREN exp COMMA exp RPAREN 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		RESULT = new MeggyGetPixel(m.line, m.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-5)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= MINUS exp 
            {
              IExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new NegExp(m.line, m.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp TIMES exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue t = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new MulExp(t.line, t.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp MINUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new MinusExp(m.line, m.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp PLUS exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue p = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new PlusExp(p.line, p.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp EQUAL exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue eq = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new EqualExp(eq.line, eq.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp AND exp 
            {
              IExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		SymbolValue a = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new AndExp(a.line, a.pos, e1, e2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= COMMENT 
            {
              IStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			//System.out.println("comment");
		//RESULT = new Comment(c.line, c.pos, c.lexeme, c.value);
		RESULT = null;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WHILE LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue w = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
			
		//System.out.println("in while statement");
		RESULT = new WhileStatement(w.line, w.pos, e, s);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= IF LPAREN exp RPAREN statement ELSE statement 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s2 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println("if/else");
		RESULT = new IfStatement(i.line, i.pos, e, s1, s2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IF LPAREN exp RPAREN statement 
            {
              IStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s1 = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		//System.out.println("if");
		IStatement s2 = new BlockStatement(s1.getLine(), s1.getPos()+1, new LinkedList<IStatement>());
		RESULT = new IfStatement(i.line, i.pos, e, s1, s2);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= MEGGYDELAY LPAREN exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		SymbolValue m = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		//System.out.println("Delay");
		RESULT = new MeggyDelay(m.line, m.pos, e);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= MEGGYSETPIXEL LPAREN exp COMMA exp COMMA exp RPAREN SEMI 
            {
              IStatement RESULT =null;
		int mspleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).left;
		int mspright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)).right;
		SymbolValue msp = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-6)).right;
		IExp e1 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-4)).right;
		IExp e2 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		IExp e3 = (IExp)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		
		//System.out.println("MSP");
		RESULT = new MeggySetPixel(msp.line, msp.pos, e1, e2, e3);
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-8)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= LBRACE statement_list RBRACE 
            {
              IStatement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue lb = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> list = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
		//System.out.println("{statement_list}");
		RESULT = new BlockStatement(lb.line, lb.pos, list);
		//System.out.println("successfully set statement::= blockstatements "+ list.size());
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_list ::= 
            {
              List<IStatement> RESULT =null;
		
		RESULT = new LinkedList<IStatement>();
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_list ::= statement_list statement 
            {
              List<IStatement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> sl = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		IStatement s = (IStatement)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		sl.add(s);
		RESULT = sl;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_class ::= main_class COMMENT 
            {
              MainClass RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = m;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_class ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN statement_list RBRACE 
            {
              MainClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)).right;
		SymbolValue c = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-14)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-13)).right;
		SymbolValue name = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-13)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue param = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-2)).right;
		SymbolValue l = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		List<IStatement> list = (List<IStatement>)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		
			BlockStatement blockStatement = new BlockStatement(l.line, l.pos, list);
			System.out.println("mainClass");
			MainClass _mainClass_ = new MainClass(c.line, c.pos, name.lexeme, param.lexeme, blockStatement);
			RESULT = _mainClass_; 
		
              CUP$mj$result = parser.getSymbolFactory().newSymbol("main_class",6, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-14)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= COMMENT program 
            {
              Program RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		Program p = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = p;
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= IMPORT MEGGY SEMI main_class 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)).right;
		SymbolValue i = (SymbolValue)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$mj$stack.peek()).right;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$mj$stack.peek()).value;
		
		RESULT = new Program(i.line, i.pos, m, new LinkedList<IClassDecl>());
	
              CUP$mj$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-3)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          return CUP$mj$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$mj$stack.elementAt(CUP$mj$top-1)).value;
		RESULT = start_val;
              CUP$mj$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$mj$stack.elementAt(CUP$mj$top-1)), ((java_cup.runtime.Symbol)CUP$mj$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$mj$parser.done_parsing();
          return CUP$mj$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

